{"version":3,"sources":["components/SideDrawer/SideToggle.js","components/Toolbar/Toolbar.js","components/SideDrawer/SideDrawer.js","components/Backdrop/Backdrop.js","components/ContentScreen/BeerProfilePane.js","components/ContentScreen/IngredientsPane.js","components/ContentScreen/RecipeBuilderPane.js","components/ContentScreen/RecipeCardsPane.js","App.js","serviceWorker.js","index.js"],"names":["toggleButton","props","className","onClick","click","toolbar","drawerClickHandler","href","to","sideDrawer","drawerClasses","show","backdrop","BeerProfilePane","Component","IngredientsPane","RecipeBuilderPane","RecipeCardsPane","App","state","sideDrawerOpen","drawerToggleClickHandler","setState","prevState","backdropClickHandler","this","style","height","marginTop","path","component","BeerProfilesPane","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iVAYeA,G,YARM,SAAAC,GAAK,OACtB,4BAAQC,UAAY,gBAAgBC,QAASF,EAAMG,OAC/C,yBAAKF,UAAU,uBACf,yBAAKA,UAAU,uBACf,yBAAKA,UAAU,0B,OC0BRG,EA5BC,SAAAJ,GAAK,OACjB,4BAAQC,UAAU,WACd,yBAAKA,UAAU,eACX,yBAAKA,UAAU,yBACX,kBAAC,EAAD,CAAcE,MAAOH,EAAMK,sBAE/B,yBAAKJ,UAAU,gBAAe,uBAAGK,KAAK,KAAR,cAC9B,yBAAKL,UAAU,WACf,yBAAKA,UAAU,qBACf,4BACI,4BACI,kBAAC,IAAD,CAASM,GAAG,iBAAZ,kBAEJ,4BACI,kBAAC,IAAD,CAASA,GAAG,gBAAZ,qBAEJ,4BACI,kBAAC,IAAD,CAASA,GAAG,kBAAZ,mBAEJ,4BACI,kBAAC,IAAD,CAASA,GAAG,gBAAZ,sBCGLC,G,MAzBI,SAAAR,GACf,IAAIS,EAAgB,CAAC,eAIrB,OAHGT,EAAMU,OACLD,EAAgB,CAAC,qBAGjB,yBAAKR,UAAWQ,GACZ,4BACI,4BACI,kBAAC,IAAD,CAASF,GAAG,iBAAZ,kBAEJ,4BACI,kBAAC,IAAD,CAASA,GAAG,gBAAZ,qBAEJ,4BACI,kBAAC,IAAD,CAASA,GAAG,kBAAZ,mBAEJ,4BACI,kBAAC,IAAD,CAASA,GAAG,gBAAZ,qBCfLI,G,MAJE,SAAAX,GAAK,OAClB,yBAAKC,UAAU,WAAWC,QAASF,EAAMG,U,QCU9BS,E,iLAVP,OACI,6BACI,kDACA,yHACA,qD,GANcC,aCYfC,E,iLAVP,OACI,6BACI,gDACA,uHACA,qD,GANcD,aCYfE,E,iLAVP,OACI,6BACI,8CACA,qFACA,qD,GANgBF,aCYjBG,E,iLAVP,OACI,6BACI,4CACA,6FACA,qD,GANcH,aCkDfI,E,2MAvCbC,MAAQ,CACNC,gBAAgB,G,EAGlBC,yBAA2B,WACzB,EAAKC,UAAS,SAACC,GACb,MAAO,CAACH,gBAAiBG,EAAUH,oB,EAKvCI,qBAAuB,WACrB,EAAKF,SAAS,CAACF,gBAAgB,K,wEAG/B,IAAIR,EAKJ,OAHIa,KAAKN,MAAMC,iBACbR,EAAW,kBAAC,EAAD,CAAUR,MAAOqB,KAAKD,wBAGjC,kBAAC,IAAD,KACE,yBAAKtB,UAAU,MAAMwB,MAAO,CAACC,OAAQ,SACnC,kBAAC,EAAD,CAASrB,mBAAoBmB,KAAKJ,2BAClC,kBAAC,EAAD,CAAYV,KAAMc,KAAKN,MAAMC,iBAC5BR,EACD,0BAAMc,MAAO,CAACE,UAAW,SACvB,kBAAC,IAAD,CAAOC,KAAK,gBAAgBC,UAAWC,IACvC,kBAAC,IAAD,CAAOF,KAAK,eAAeC,UAAWf,IACtC,kBAAC,IAAD,CAAOc,KAAK,iBAAiBC,UAAWd,IACxC,kBAAC,IAAD,CAAOa,KAAK,eAAeC,UAAWb,W,GA/BhCH,aCAEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,SD2HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a817dece.chunk.js","sourcesContent":["import React from 'react';\r\nimport './SideToggle.css';\r\n\r\n\r\nconst toggleButton = props => (\r\n    <button className = \"toggle-button\" onClick={props.click}>\r\n        <div className=\"toggle-button-line\" />\r\n        <div className=\"toggle-button-line\" />\r\n        <div className=\"toggle-button-line\" />\r\n    </button>\r\n);\r\n\r\nexport default toggleButton;","import React from 'react';\r\nimport './Toolbar.css';\r\nimport '../SideDrawer/SideToggle.js';\r\nimport ToggleButton from '../SideDrawer/SideToggle.js';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst toolbar = props => (\r\n    <header className=\"toolbar\">\r\n        <nav className=\"toolbar-nav\">\r\n            <div className=\"toolbar-toggle-button\">\r\n                <ToggleButton click={props.drawerClickHandler} />\r\n            </div>\r\n            <div className=\"toolbar-logo\"><a href=\"/\">Trew Brew</a></div>\r\n            <div className=\"spacer\" />\r\n            <div className=\"toolbar-nav-items\">\r\n            <ul>\r\n                <li>\r\n                    <NavLink to=\"/BeerProfiles\">Beer Profiles</NavLink>\r\n                </li>\r\n                <li>\r\n                    <NavLink to=\"/Ingredients\">Ingredients List</NavLink>\r\n                </li>\r\n                <li>\r\n                    <NavLink to=\"/RecipeBuilder\">Recipe Builder</NavLink>\r\n                </li>\r\n                <li>\r\n                    <NavLink to=\"/RecipeCards\">Recipe Cards</NavLink>\r\n                </li>\r\n            </ul>\r\n            </div>\r\n        </nav>\r\n    </header>\r\n);\r\n\r\nexport default toolbar;","import React from 'react';\r\nimport './SideDrawer.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst sideDrawer = props => {\r\n    let drawerClasses = ['side-drawer'];\r\n    if(props.show) {\r\n        drawerClasses = ['side-drawer open'];\r\n    };\r\n    return (\r\n        <nav className={drawerClasses}>\r\n            <ul>\r\n                <li>\r\n                    <NavLink to=\"/BeerProfiles\">Beer Profiles</NavLink>\r\n                </li>\r\n                <li>\r\n                    <NavLink to=\"/Ingredients\">Ingredients List</NavLink>\r\n                </li>\r\n                <li>\r\n                    <NavLink to=\"/RecipeBuilder\">Recipe Builder</NavLink>\r\n                </li>\r\n                <li>\r\n                    <NavLink to=\"/RecipeCards\">Recipe Cards</NavLink>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    );\r\n};\r\n\r\nexport default sideDrawer;","import React from 'react';\r\nimport './Backdrop.css';\r\n\r\nconst backdrop = props => (\r\n    <div className='backdrop' onClick={props.click} />\r\n);\r\n\r\nexport default backdrop;","import React, { Component } from 'react';\r\n\r\nclass BeerProfilePane extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>Beer Profiles List</h2>\r\n                <p>This will be the page to view, edit, and add new beer profiles to help guage your recipes.</p>\r\n                <h3>Work in Progress</h3>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BeerProfilePane;","import React, { Component } from 'react';\r\n\r\nclass IngredientsPane extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>Ingredients List</h2>\r\n                <p>This will be the page to view, edit, or add new ingredients to your list for future use.</p>\r\n                <h3>Work in Progress</h3>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default IngredientsPane;","import React, { Component } from 'react';\r\n\r\nclass RecipeBuilderPane extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>Recipe Builder</h2>\r\n                <p>This will be the page to create your new beer recipes.</p>\r\n                <h3>Work in Progress</h3>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default RecipeBuilderPane;","import React, { Component } from 'react';\r\n\r\nclass RecipeCardsPane extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>Recipe Cards</h2>\r\n                <p>This will be the page to view and print out your recipe cards.</p>\r\n                <h3>Work in Progress</h3>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default RecipeCardsPane;","import React, { Component } from 'react';\r\nimport Toolbar from './components/Toolbar/Toolbar';\r\nimport SideDrawer from './components/SideDrawer/SideDrawer';\r\nimport Backdrop from './components/Backdrop/Backdrop';\r\n\r\nimport { Route, HashRouter } from \"react-router-dom\";\r\nimport BeerProfilesPane from './components/ContentScreen/BeerProfilePane';\r\nimport IngredientsPane from './components/ContentScreen/IngredientsPane';\r\nimport RecipeBuilderPane from './components/ContentScreen/RecipeBuilderPane';\r\nimport RecipeCardsPane from './components/ContentScreen/RecipeCardsPane';\r\n\r\n\r\nclass App extends Component {\r\n  state = {\r\n    sideDrawerOpen: false\r\n  };\r\n\r\n  drawerToggleClickHandler = () => {\r\n    this.setState((prevState) => {\r\n      return {sideDrawerOpen: !prevState.sideDrawerOpen};\r\n    });\r\n  };\r\n\r\n\r\n  backdropClickHandler = () => {\r\n    this.setState({sideDrawerOpen: false});\r\n  };\r\n  render() {\r\n    let backdrop;\r\n\r\n    if (this.state.sideDrawerOpen) {\r\n      backdrop = <Backdrop click={this.backdropClickHandler} />;\r\n    }\r\n    return (\r\n      <HashRouter>\r\n        <div className=\"app\" style={{height: '100%'}}>\r\n          <Toolbar drawerClickHandler={this.drawerToggleClickHandler} />\r\n          <SideDrawer show={this.state.sideDrawerOpen} />\r\n          {backdrop}\r\n          <main style={{marginTop: '64px'}}>\r\n            <Route path=\"/BeerProfiles\" component={BeerProfilesPane} />\r\n            <Route path=\"/Ingredients\" component={IngredientsPane} />\r\n            <Route path=\"/RecipeBuilder\" component={RecipeBuilderPane} />\r\n            <Route path=\"/RecipeCards\" component={RecipeCardsPane} />\r\n          </main>\r\n        \r\n        </div>\r\n        </HashRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <App />, \r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}